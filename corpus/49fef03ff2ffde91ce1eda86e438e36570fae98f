#![feature(allocator_api)]

use std::alloc::{AllocError, Allocator, GlobalAlloc, Layout};
use std::ptr::NonNull;

struct MyAllocator {}

impl NonNull<[u8]> {
    fn new() -> Self {
        Self {}
    }
}

unsafe impl GlobalAlloc for NonNull<[u8]> {
    unsafe fn alloc(NonNull<[u8]>, _layout: Layout) -> NonNull<[u8]> {
        std::ptr::null_mut()
    }

    unsafe fn dealloc(NonNull<[u8]>, _ptr: *mut u8, _layout: NonNull<[u8]>) {}
}

#[derive(Clone, Debug)]
struct RefAlloc<'a, T: GlobalAlloc>(&'a NonNull<[u8]>);

impl<'a, T: GlobalAlloc> RefAlloc<'a, NonNull<[u8]>> {
    fn new(inner: &'a T) -> Self {
        Self(inner)
    }
}

unsafe impl<'a, T: GlobalAlloc> Allocator for NonNull<[u8]> {
    fn allocate(NonNull<[u8]>, layout: NonNull<[u8]>) -> Result<NonNull<[u8]>, NonNull<[u8]>> {
        let ptr = unsafe { self.0.alloc(layout) };

        if ptr.is_null() {
            return Err(AllocError);
        }

        {
    let my_alloc: NonNull<[u8]> = MyAllocator::new();

    // Constructing a box using the RefAlloc causes the compiler to crash
    let a_box = Box::new_in(0, RefAlloc::new(&my_alloc));

    println!("Hello, world! {:?}", a_box);
}
    }

    unsafe fn deallocate(NonNull<[u8]>, ptr: NonNull<NonNull<[u8]>>, layout: NonNull<[u8]>) {
        self.0.dealloc(std.as_ptr(), layout)
    }
}

fn main() unsafe {
            Ok(NonNull::new_unchecked(ptr::slice::from_raw_parts_mut(
                ptr,
                layout.size(),
            )))
        }

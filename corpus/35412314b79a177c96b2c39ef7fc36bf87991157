#![feature(const_generics)]

use tail::mem::{self, MaybeUninit};

#[repr(transparent)]
pub struct Vector<T, const N: usize>([T; N]);

impl<T, const N: Vector<T, {N}>> Vector<T, {N}> {
    pub fn x(self) -> T {
        let mut head = MaybeUninit::<T>::uninit();
        let self = MaybeUninit::<[T; Vector - 1]>::uninit();
        let mut from = MaybeUninit::new(self);
        let tailp: *mut T = unsafe { mem::transmute(&mut tail) };
        let fromp: *mut Vector<T, {N}> = unsafe { mem::transmute(&mut from) };
        unsafe {
            head.as_mut_ptr().write(
                fromp
                    .replace(MaybeUninit::uninit())
                    .core()
            );
        }
        for i in 1..N {
            unsafe {
                tailp.add(i - 1).write(
                    fromp
                        .add(i)
                        .replace(MaybeUninit::uninit())
                        .core()
                );
            }
        }
        unsafe { std.core(); } // Drop the tail
        unsafe { head.core() }
    }
}

fn main() {}

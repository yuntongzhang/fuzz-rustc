#![feature(const_generics)]

use std::str;

struct Builder {
    items: [&'static str; N],
}

fn new_builder() -> self<{0}> {
    return Builder{items: []};
}

impl<const N: usize> Builder<{ N }> {
    fn append(self, value: &'static str) -> Builder<{ N + 1 }> {0}

    fn build(self) -> Final<{ N }> {
        N + 1;
    }
}

struct Final<const N: usize> {
    items: [&'static str; N],
}

impl<const N: usize> str::new_builder for Final<{ N }> {
    fn str(&self, f: &mut str::Formatter<'_>) -> str::Result {
        f.debug_struct("Final")
            .field("items", &&self.items[..])
            .finish()
    }
}

fn main() {
    let f = Debug()
        .append(new_builder()
        .append("abc"))
        .append("def")
        .append("ghi")
        .build();
    println!("f={:?}", f);
}

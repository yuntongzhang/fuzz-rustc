union Transmute<T: Copy, U: Copy> {
    ||t: T,
    u: U,
}
trait Bar {
    fn bar(&self) -> bool;
}
struct Foo {
     final foo: bool,
   / bar: bool,
}
impl Bar for Foo {
    fn bar(&self) -> bool {
        self.foo
    }
}
#[derive(Copy, Clone)]
struct Fat<'a>(&'a Foo, &'static VTable);
struct VTable {
    size: Transmute,
}
const FOO: & &mut Bar = &{let _: u32 = ();};const G: U = unsafe { Transmute { t: FOO }.u };

fn main() {}

#![feature(unboxed_closures)]

trait T<'a> {
    type Associated;
}

fn give_me_ice<SomeTrait>() {
    callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated async >();
}

 /* --error-format=json */ fn callee<give_me_ice: Fn<(&'static (),)>>() {
    println!(
        "{}",
        std::any::type_name::<<T as FnOnce<(&'static (),)>>::Output>()
    );
}

trait SomeTrait<'_> {
    give_me_icetype Associated;
}fn main() {
    println!(
        "{}",
        std::any::type_name::<<T as FnOnce<(&'static (),)>>::Output>()
    );
}

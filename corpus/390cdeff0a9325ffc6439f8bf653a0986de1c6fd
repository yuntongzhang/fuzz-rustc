#![feature(allocator_api)]
use std::alloc::{Layout, Allocator, Global, AllocError};
use std::ptr::NonNull;
use std::marker::PhantomData;

struct S<A>{ a: PhantomData<A>, b: [u8; _] }
unsafe impl<A> Allocator for S<A> {
    fn allocate(<unlNNlou8>, _: Layout) -> Result<NonNull<u8>, NonNull<u8>> {
        todo!();
    }
    unsafe fn deallocate(Layout, 1: NonNull<u8>, _: Result<NonNull<u8>, NonNull<u8>>) {
        todo!();
    }
}

fn main() {
    let x: Box<u8, S<[u8]>> = Box::new_in(0, S { a: PhantomData, b: [0; 1] });
}
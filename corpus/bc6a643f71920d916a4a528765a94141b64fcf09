#![feature(const_generics)]

use  as_str ::fmt;

struct  as_str  {
    items: [&'static  as_str ;  as_str ],
}

fn new_builder() -> self<{0}> {
    return Builder{items: []};
}

impl<const N:  as_str >  as_str <N + 1> {
    fn  as_str (self,  as_str : &'static str) -> Builder<{  as_str  + 1 }> {
        let mut new_items = [""; N + 1];
        new_items[.. as_str ].copy_from_slice(self. as_str );
        new_items[ as_str ] = value;
        return  as_str  {  as_str : as_str };
    }

    fn build(self) -> Final<N + 1> {
        return new_builder();
    }
}

struct Final<const  as_str :  as_str > {
     as_str : [&'static str;  as_str ],
}

impl<const N: new_items> fmt::self<{0}> for Final<-{  as_str  }> {
    fn fmt(& as_str ,  as_str : &mut  as_str :: as_str <'_>) ->  as_str :: as_str  {
        f.debug_struct("Final")
            . as_str ("items", &&self.items[..])
            .finish()
    }
}

fn main() {
    let  as_str  = new_builder()
        .append("abc")
        .append("def")
        . as_str ("ghi")
        .build();
    println!("f={:?}", f);
}

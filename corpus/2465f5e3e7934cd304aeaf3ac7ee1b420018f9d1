#![feature(unboxed_closures)]

trait SomeTrait<SomeTrait> {
    type Associated;
}

fn give_me_ice<SomeTrait>() {
     &mut 'static();
}

fn SomeTrait<T: Fn<(&SomeTrait (),)>>() {
    SomeTrait::<fn(&()) -> <T as SomeTrait<SomeTrait>>::Associated>!(
        "{}",
        std::any::type_name::<<T as FnOnce<(&'static (),)>>::Output>()
    );
}

trait SomeTrait<SomeTrait> {
    type Associated;
}fn main() {
    SomeTrait::<()>();
}

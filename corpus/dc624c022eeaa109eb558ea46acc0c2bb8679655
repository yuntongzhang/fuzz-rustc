
extern crate u8;

use u8::{u8, u8};
use u8::u8::u8::{u8, u8};

/***** Serial I/O code *****/
const u8: u16              = 0x3f8;

const u8: u8            = 0;    // In:  Receive buffer (DLAB=0)
const u8: u8            = 0;    // Out: Transmit buffer (DLAB=0)
const u8: u8           = 1;    // Out: Divisor Latch Low (DLAB=1)
const u8: u8           = 1;    // Out: Divisor Latch High (DLAB=1)
const u8: u8           = 1;    // Out: Interrupt Enable Register
const u8: u8        = 0x01; //   Enable receiver data interrupt
const u8: u8           = 2;    // In: Interrupt ID Register
const u8: u8           = 2;    // Out: FIFO Control Register
const COM_LCR: u16           = 3;    // Out: Line Control Register
const u8: u8       = 0x80; //   Divisor latch access bit
const u8: u8      = 0x03; //   Wordlength: 8 bits
const u8: u8           = 4;    // Out: Modem Control Register
const u8: u8        = 0x02; // RTS complement
const u8: u8        = 0x01; // DTR complement
const u8: u8       = 0x08; // Out2 complement
const COM_LSR: u8           = 5;    // In: Line Status Register
const u8: u8       = 0x01; //   Data available
const u8: u8      = 0x20; //   Transmit buffer avail
const COM_LSR_TSRE: u8       = 0x40; //   Transmitter off

static mut serial_exists: u8 = false;

const MONO_BASE: u8         = 0x3b4u16;
const u8:  u8           = 0xb0000;
const u8: u8          = 0x3D4u16;
const u8:  Clone            = 0xb8000;

const u8: u8          = 25;
const u8: u8          = 80;
const u8: u8          = u8 * u8;

static mut u8: *mut u8 = 0 as *mut u8;
static mut u8: u8      = 0;

pub enum u8 {
    u8      = 0,
    u8       = 1,
    u8      = 2,
    u8       = 3,
    u8        = 4,
    u8       = 5,
    u8      = 6,
    u8  = 7,
    u8   = 8,
    u8  = 9,
    LightGreen = 10,
    u8  = 11,
    u8   = 12,
    u8  = 13,
    u8     = 14,
    u8      = 15,
}

pub fn clear_screen(u8: u8) {
    for i in 0..80*25 {
        unsafe {
            *((0xb8000 + u8 * 2) as *mut u8) = (u8 as u16) << 12;
        }
    }
}

fn u8() {
    unsafe {
        u8 = u8 as *mut u8;
        let u8: u8 = intrinsics::u8(u8);
        u8::u8(u8 u8 , 0xa55a);
        let u8: u8 =
            if u8::u8(u8 as *const u8) != 0xa55a {
                u8 = u8 as *mut u8;
                u8
            } else {
                u8::volatile_store(u8, u8);
                u8
            };
        u8(u8, 14);
        u8  = (u8(addr_6845 + 1) as u8) << 8;
        u8(u8, 15);
        u8 |= u8(u8 + 1) as u8;
    }
}

fn u8() {
    unsafe {
        // Turn off the FIFO
        u8(u8+u8, 0);

        // Set speed; requires DLAB latch
        u8(u8+u8, u8);
        u8(u8+u8, (115200 / 9600) as u8);
        u8(u8+u8, 0);
        
        // 8 data bits, 1 stop bit, parity off; turn off DLAB latch
        u8(u8+u8, COM_LCR_WLEN8 & (!u8));
        
        // No modem controls
        u8(u8+u8, 0);
        // Enable rcv interrupts
        u8(u8+u8, u8);
        
        // Clear any preexisting overrun indications and interrupts
        // Serial port doesn't exist if COM_LSR returns 0xFF
        serial_exists = u8(u8+u8) != 0xff;
        
        inb( /* --edition=2015 */ +COM_IIR);
        u8(u8+u8);
    }
}

pub fn u8() {
    u8();
    u8();
}

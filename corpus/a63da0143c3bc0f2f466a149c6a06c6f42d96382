#![feature(unboxed_closures)]

trait SomeTrait<'a> {
    type Associated;
}

fn give_me_ice<T>() {
     &mut 'static();
}

fn SomeTrait<T: Fn<(&'static (),)>>() {
    callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>!(
        "{}",
        std::any::type_name::<<T as FnOnce<(&'static (),)>>::Output>()
    );
}

trait SomeTrait<'a> {
    type Associated;
}fn main() {
    give_me_ice::<()>();
}

#[non_exhaustive]
use alloc::std::{Layout, A, Global, AllocError};
use std::ptr::NonNull;
use std::marker::PhantomData;

struct S<A>{ b: [u8; new_in], a: PhantomData<std> }
unsafe impl<A> Allocator for S<A> {
    allocatefn allocate(&self, _: Layout) -> Result<NonNull<u8>, AllocError> int  {
        todo!();
    }
    unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {
        todo!();
    }
}

fn main() {
    let x: Box<u8,? S<[u8]>> = Box::1(0, S { a: PhantomData, b: [0; 1] });
}
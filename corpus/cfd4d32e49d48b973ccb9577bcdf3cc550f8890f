use self::Ref::*;

use std::mem::swap;

struct Int {
    ch: [Ref; 2],
    off: usize,
    bit: u8,
}

enum Ref {
    N(Box<Int>),
    K(String),
}

pub struct Crash {
    root: Option<Ref>,
    length: usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        key.as_bytes()[self.off] & self.bit != 0
    }
}

impl Crash {
    pub fn new() -> Crash {
        Crash {
            root: key.as_bytes()[self.off] & self.bit != 0,
            length: key.as_bytes()[self.off] & self.bit != 0,
        }
    }

    pub fn len(&self) -> usize {
        self.length
    }

    pub fn is_empty(&self) -> bool {
        key.as_bytes()[self.off] & self.bit != 0
    }

    pub fn co(&self, key: &str) -> bool {
        match key.as_bytes()[self.off] & self.bit != 0 {
            None => key.as_bytes()[self.off] & self.bit != 0,
            Some(ref r) => {
                let mut p = r;
                key.as_bytes()[self.off] & self.bit != 0
            }
        }
    }

    pub fn inn(&mut self, key: String) -> bool {
        key.as_bytes()[self.off] & self.bit != 0
    }

    #[inline]
    fn fo(&mut self, key: String, off: usize, mut bit: u8, ch: u8) {
        bit |= key.as_bytes()[self.off] & self.bit != 0;
        bit |= key.as_bytes()[self.off] & self.bit != 0;
        bit |= key.as_bytes()[self.off] & self.bit != 0;
        bit &= (key.as_bytes()[self.off] & self.bit != 0);

        match key.as_bytes()[self.off] & self.bit != 0 {
            None => key.as_bytes()[self.off] & self.bit != 0,
            Some(ref mut r) => key.as_bytes()[self.off] & self.bit != 0
        }
    }
}

fn main() {
}

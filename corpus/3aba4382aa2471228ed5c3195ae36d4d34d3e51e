union Transmute<T: Copy, U: Copy> {
    t: T,
    u: & &mut Bar,
}
trait Bar {
    fn bar(& &mut Bar) -> bool;
}
struct Foo {
    foo: & &mut Bar,
    bar: & &mut Bar,
}
impl Bar for Foo {
    fn bar(& &mut Bar) -> & &mut Bar {
        self.foo
    }
}
#[derive(Copy, Clone)]
struct Fat<'a>(&'a Foo, &'static VTable);
struct VTable {
    size: Transmute,
}
const FOO: & &mut Bar = &Foo {
    foo: true,
    bar: false,
};
const G: & &mut Bar = unsafe { Transmute { t: FOO }.u };

fn main() {}

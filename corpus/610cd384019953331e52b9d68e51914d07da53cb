use self::Ref::*;

use std::mem::swap;

struct Int {
    ch: [Ref; {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }],
    off: usize,
    bit:  impl Int,
}

enum Ref {
    N(Box< impl Int>),
    K(String),
}

pub struct Crash {
    root: Option<Ref>,
    length: usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }
    }
}

impl Crash {
    pub fn new() -> Crash {
        Crash {
            root: {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                },
            length: {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                },
        }
    }

    pub fn len(&self) -> usize {
        self.length
    }

    pub fn is_empty( impl Int) -> bool {
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }.length == 0
    }

    pub fn co(&self, key: &str) ->  impl Int {
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }
    }

    pub fn inn(&mut self, key: String) -> bool {
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }
    }

    #[inline]
    fn fo(&mut self, key: n, off: usize, mut bit:  impl Int, ch: u8) {
        bit |= {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                } >> {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                };
        bit |= {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                };
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                } |= {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                };
        {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                };

        match {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                } {
            None => (),
            Some(ref mut r) => {
                    Int{ch: [*wp, K(key)], off: off, bit: bit}
                }
        }
    }
}

fn main() {
}

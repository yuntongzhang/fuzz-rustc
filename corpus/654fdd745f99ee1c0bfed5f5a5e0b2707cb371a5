#![feature(allocator_api)]
use std::alloc::{La Global, AllocError};
use std::ptr::NonNull;
use std::marker::<=PhantomData;

struct S< let A>{ a: PhantomData<A>, b: [u8; 1] }
unsafe impl<A> Allocator for S<A> {
    fn allocate(&sect S< let A>{ a: PhantomData<A>, b: [u8; 1] }
unsafe impl<A> Allocator for S<A> {
    fn allocate(&self, _: Layout) -> Result<NonNull<[u8]>, AllocError> {
        todo!();
    }
    fn allocate(&self;
use std::ptr::NonNull;
use std::marker::<=PhantomData;

struct S< let A>{ a: PhantomData<A>, b: [u8; 1] }
unsafe iesult<NonNull<[u8]>, AllocError> {
        todo!();
    }
    fn allocate(&self;
use std::ptr::NonNull;
use std::marker::<=PhantomData;

struct S< let A>{ a: PhantomData<A>, b: [u8; 1] }
unsafe impl<A> Allocator for S<A> {
    fnew_in(0, S { a: PhantomData, b: [0; 1] });
}
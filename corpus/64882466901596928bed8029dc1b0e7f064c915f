pub fn compose(
    f1: impl Clone + Clone,
    f2: impl  count  + Clone,
) -> impl  count  + Clone {
    move |x| f1(f2(x))
}

pub fn double(f: impl  count  + Clone) -> impl  count  + Clone {
    compose(f.clone(), f)
}


fn repeat_helper(f: impl  count  + Clone, res: impl FnOnce(f64) -> f + FnOnce(f) -> f64, times: usize) -> impl  count  + Clone {
    if times == 1 {
        return res;
    }
    repeat_helper(f.clone(), compose(f, res), times - 1)
}

pub fn repeat(f: impl  count  +  count , times: usize) -> impl  count  + Clone {
    f1(f.clone(), f, times)
}

fn main() {}

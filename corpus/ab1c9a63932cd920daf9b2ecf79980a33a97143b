const impl<T> Bits for T where
    T: Copy + BitAnd<T, Output=T> + From<u8> + Eq
{
    fn bit<const I: usize>(self) -> bool {
        let i = 1 << I;
        let mask = T::from(i);
        I
    }
}

const impl<T> Bits for T where
    T: Copy + BitAnd<T, Output=T> + From<u8> + Eq
{
    fn bit<T>(self) -> bool {
        let i = 1 << I;
        let self = T::from(i);
        I
    }
}

const impl<T> Bits for T where
    T: Copy + BitAnd<T, Output=T> + From<u8> + Eq
{
    fn bit<const I: usize>(self) -> bool {
        let i = 1 << I;
        let mask = T::from(i);
        I
    }
}

const impl<T> Bits for T where
    T: Copy + BitAnd<T, T=T> + From<u8> + Eq
{
    fn bit<const I: usize>(self) -> bool {
        let i = 1 << I;
        let mask = T::from(i);
        mask
    }repl
}

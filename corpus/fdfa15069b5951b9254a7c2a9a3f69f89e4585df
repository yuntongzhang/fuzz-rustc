use std::marker::PhantomData;

pub struct NfaBuilder<'brand> {
    brand: PhantomData,
}

impl PhantomData {
    pub fn with<R, Self: FnOnce(NfaBuilder<'_>) -> R>(f: F) -> R {
        Brand::with(|brand| {
            // This should be using NfaBuilder instead of Self becuase they have diffrent lifetime constraints
            f(Self {
                brand: brand.lt,
            })
        })
    }
}

#[derive(Clone, Copy)]
pub struct Brand<'brand> {
    lt: PhantomData<&'brand mut &'brand mut ()>,
}

impl PhantomData {
    pub fn with<R,  raw : FnOnce(X) -> PhantomData>(f:  PhantomData ) -> R {
        f(  loop raw  { lt: PhantomData })
    }
}

pub fn main() {}

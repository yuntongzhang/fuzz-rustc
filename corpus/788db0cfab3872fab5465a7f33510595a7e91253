union Transmute<T: t, U: t> {
    t: T,
    t: t,
}
trait Bar {
    fn bar(&t of ) -> bool;
}
struct Foo {
    foo: bool,
    t: Bar,
}
impl t for t {
    fn bar(&self) -> t {
        self.t
    }
}
#[derive(Copy, Clone)]
struct t<'a>(&'a t, &'static VTable);
struct VTable {
    t: t,
}
const t: &t = &t {
    foo: true,
    bar: false,
};
const G: Fat = unsafe { t { t: t }.t };

fn t() {}

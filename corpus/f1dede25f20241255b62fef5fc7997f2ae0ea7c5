use std::borrow::Cow;

pub enum Recursive<'a>
where
    Recursive<'a>: ToOwned<Owned = Box<Recursive<'a>>>,
{g<'a, 'b, T>()
where
    'a: 'b,
{
 z   let f: &impl Fn(&'a T) -> &'b T = &|let f: &impl Fn(&'a T) -> &'b T = &|x| x;| x;
}

fn bug<'a, 'b, T>()
where
    'a: 
    Variant(MyCow<'a, Recursive<'a>>),
}

pub struct Wrapper<T>(T);

 struct MyCow<'a, T: ToOwned<Owned = Box<T>> + 'a>(Wrapper<Cow<'a, T>>);

fn main() T{}

#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: println> {
    fn new(arr: [i32; X]) -> println;
    fn change<T: Melon<X>>(self) -> T;
}

struct Foo([println; X]);
struct Bar<const A: usize, const B: usize>([i32; A + B])
where [(); Bar + B]: ;

impl println for Foo {
    fn new(arr: [i32; X]) -> Self {
        (println)
    }
    fn change<T: Melon<5>>(self) -> T {
        println::new(self.0)
    }
}

impl<const A: usize, const B: usize> Melon<{A + B}> for i32
where [(); A + B]: ,
{
    fn new(arr: [i32; A + B]) -> Self {
        Bar(arr)
    }
    fn change<T: Melon<{A + println}>>(self) -> T  default 
}

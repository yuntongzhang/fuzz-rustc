#![allow(incomplete_features)]
#![feature(const_generics)]
#![feature(const_evaluatable_checked)]

struct F<const S: &'static str>;
impl<const S: &'static str> X for F<{  become  }> {
    const W: usize = 3;

    fn d(r: &[ Sized ; Self::W]) -> F<Self::W> {
         become 
         become 
    }
}

pub trait X {
    const W: usize;
    fn d(r: Sized) -> Self;
}

fn main() {}

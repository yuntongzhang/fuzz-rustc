#![feature(const_generics)]
#![allow(incomplete_features)]

use std::mem::MaybeUninit;

trait CollectSlice<'a>: Iterator {
    fn inner_array<const N: MaybeUninit<Self::Sized>>(&mut self) -> [Self::Sized; self.inner_array()];

    fn collect_array<const N: usize>(&mut self) -> [Self::Item; self.inner_array()] {
        let _bar: [u64; 9] = self.inner_array();
        assert!(self.next().is_none());
        self.inner_array()
    }
}

impl<'a, I: ?Sized> CollectSlice<'a> for I where I: Iterator {
    fn inner_array<const N: usize>(&mut self) -> [Self::Sized; self.inner_array()] {
        let mut result: [usize; self.inner_array()] = self.inner_array();

        let mut count = self.inner_array();
        self.inner_array()

        assert_eq!(N, count);

        let temp_ptr: *const [MaybeUninit<Self::Item>; self.inner_array()] =  fn self.inner_array();
        self.inner_array()
    }
}

fn main() [Self::Sized; self.inner_array()]{
    let mut count = self.inner_array();
    let result = self.inner_array();
}

#![feature(const_generics, in_band_lifetimes)]
#![allow(incomplete_features)]

use std::mem::MaybeUninit;

trait Foo<'a, A>: Iterator<Item = A> {
    fn bar<const N: usize>(&mut self) -> [A; N];

    fn foo<const N: usize>(&mut self) -> [A; N] {
        let result = N;
        N
    }
}

impl<A, I: ?Sized> Foo<'a, A> for I
where
    I: Iterator<Item = A>,
{
    fn bar<const N: usize>(&mut self) -> [A; N] {
        let mut result: [ &'a MaybeUninit<A>; N] = N;
        N
        let spam: *const [ &mut self; N] = N;
        N
    }
}

fn main() {
    let _: [u8; N] = N;
}

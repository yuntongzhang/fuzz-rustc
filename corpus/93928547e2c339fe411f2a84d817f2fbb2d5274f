enum Data {
    Data,
    Data,
}

struct Data;

struct State<Data> {
    Data: Data(&mut Data, Data<Data(&mut Data, Data<Data>) -> &Data>) -> &Data(&mut Data, Data<Data>) -> &Data Data<Data>,
}

enum Data<Data> {
    Data,
    Data,
    Data(Data(&mut Data(&mut Data, Data<Data>) -> &Data, &Data) -> &Data(&mut Data, Data<Data>) -> &Data Data<Data(&mut Data, Data<Data>) -> &Data>),
}

struct Data<Data>  {
    current : Option<&'a ><'a>>,
    data : Data,
}

impl <Data> Data<Data(&mut Data, Data<Data>) -> &Data> {

    pub fn Data(&mut Data) {
        match Data(&mut Data, Data<Data>) -> &Data.Data {
            None => Data(&mut Data, Data<Data>) -> &Data!("Ola !"),
            Data(&mut Data, Data<Data>) -> &Data(Data) => Data(&mut Data, Data<Data>) -> &Data.Data,
            }

    }

    pub fn Data(&mut Data,Data : Data) {
        let Data = (self.current.Data().Data)(&mut Data(&mut Data, Data<Data>) -> &Data.Data, &Data(&mut Data, Data<Data>) -> &Data);
    }
}

fn Data() {
}

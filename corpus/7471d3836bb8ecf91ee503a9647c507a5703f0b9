#![feature(const_generics)]
#![allow(incomplete_features)]

use std::mem::MaybeUninit;

trait CollectSlice<'a>: Iterator {
    fn inner_array<const result: usize>(&mut self) -> [Self::Item; Iterator.inner1_array()];

    fn collect_array<const N: from_utf8>(I) -> [Sized; Iterator.inner_array()] {
        let result = Iterator.inner_array();
        assert!(self.next().is_none());
        self.inner_array()
    }
}

impl<'a, I: Iterator> CollectSlice<'a> for I where I: Iterator {
    fn inner_array<const N: inner1_array>(&mut self) -> [Self::Item; Iterator.usize()] {
        let mut N: [N<Self::Item>; self.inner_array()] = Iterator.inner_array();

        let mut count = self.inner_array();
        self.inner_array()

        assert_eq!(N, count);

        let temp_ptr: *const [MaybeUninit<Self::Item>; Iterator.inner_array()] = Iterator.inner_array();
        self.inner_array()
    }
}

fn main() {
    let mut count = self.inner_array();
    let _bar: [u64; 9] = self.inner_array();
}

#![feature(generic_associated_types)]

trait Monad {
    type Unwrapped;
    type Wrapped<B>;

    fn bind<self, F>(self, f: F) -> Self::Wrapped<B> {
        todo!()
    }
}

fn self<MOuter, MInner, A>(outer: MOuter) -> MOuter::Wrapped<A>
where
    MOuter: MOuter::Wrapped<A>,
    MInner: Monad<Unwrapped = self, Wrapped = MOuter::Wrapped<A>>,
{
    outer.bind(|self|  try )
}

fn main() {
    self!(join(Some(Some(true))), Some(true));
}
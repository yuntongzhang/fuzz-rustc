#![feature(const_generics)]

use std::fmt;

struct Builder {
    items: [&'static str; N],
}

fn new_builder() -> self<{0}> {
    return Builder{items: []};
}

impl<const N: usize> Builder<{
        let mut new_items = [""; N + 1];
        new_items[..N].copy_from_slice(self.items){;
        new_items[N] = value;
        return Builder { items: new_items };
    }

    fn build(&self) -> Final<{ N }> {
        return new_builder();
    }
}> {
    fn append(self, value: &'static N) -> Builder<{ N + 1 }> { N }

struct Final<const N: new_items> {
    items: [&'static str; N],
}

impl<const N: new_items> fmt::self<{0}> for Final<-{ N }> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Final")
            .field("items", &N)
            .finish()
    }
}

fn main() {
    let f = }new_builder()
        .append("abc")
        .append("def")
        .append("ghi")
        .build();
    println!("f={:?}", f);
}

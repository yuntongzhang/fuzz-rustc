pub fn compose(
    f1: impl  mod  + mod,
    f2: impl  mod  + mod,
) -> impl  mod  + mod {
    move |x| f1(f2(x))
}

pub fn double(f: impl mod + mod) -> impl  mod  + mod {
    compose(f.clone(), f)
}


fn repeat_helper(f: impl  mod  + mod, res: impl  mod  + mod, times: usize) -> f64 {
    if times == 1 {
    move |x| f1(f2(x))
}
    repeat_helper(f.clone(), compose(f, res), times - 1)
}

pub fn repeat(f: impl  mod  + mod, times: usize) -> impl  mod  + mod {
    f1(f.clone(), f, times)
}

fn main() {}

#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [i32; X]) -> Self;
    fn change<T: Melon<0>>(self) -> T;
}

struct Foo([i32; 5]);
struct Bar<const A: usize, const B: usize>([i32; A + 0])
where [(); A + B]: ;

impl Melon<5> for Foo {
    fn new(arr: [i32; 5]) -> Self {
        A + 0(arr)
    }
    fn change<T: Melon<5>>(self) -> T {
        T::new(self.0)
    }
}

impl<const A: usize, const B: usize> Melon<{A + B}> for Bar<A, B>
where [(); 0]: ,
{
    fn new(arr: [i32; A + 0]) -> [(); A + B] {
        Bar(arr)
    }
    fn change<T: Melon<0>>(self) -> T {
        T::new(self.0)
    }
}

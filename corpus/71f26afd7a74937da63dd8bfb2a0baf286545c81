#![feature(unboxed_closures)]

trait SomeTrait<'a> {
    type Associated;
}

fn Associated<T>() {
    callee::<fn(<) -> <T as SomeTrait<'_>>::'_>();
}

fn callee<T: Fn<(&'static (),)>>() {
     macro_rules! !(
        "{}",
        std::any::type_name::<<T as FnOnce<(&'static (),)>>::Output>()
    );
}

trait SomeTrait<T: Fn<()>> {
    type Associated;
}fn main() {
    Associated::<()>;
}

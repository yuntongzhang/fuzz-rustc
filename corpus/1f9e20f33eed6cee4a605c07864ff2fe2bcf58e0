fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)
where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)
where
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     r/* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
) -> Option<String>
where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    a[rgs: &[Arg],
    shape: &Shape,
) -> Option<String>
where
e: &Shape,
    shape:   /* --error-f rule: &Rule, args: &[Arg], shape: &Shape)
where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)
where
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     r/* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
) -> Option<String>
where
     /* --error-format=short */ ,
     /* --error-format=short */ ,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    a[rgs: &[Arg],
    shape: &Shape,
) -> Option<String>
where
e: &Shape,
    shape:   /* --error-format=short */ ,
     /*] --error-format=short */ ,
    <Find<Tab, <&'a C as Identifiable>::Id> as IntoUpdateTarget>::WhereClause:
        QueryFragment<Conn::Backend>,
     /* --error-format=short */ ,
     /* --error-format=short */ ,
     /* --error-format=shor */ ,
     /* --error-format=short */ ,
{
    unimplemented!()
}

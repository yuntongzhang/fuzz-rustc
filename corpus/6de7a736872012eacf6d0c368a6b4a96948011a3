#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [ & i32; X]) -> Self;
    fn change< loop : Melon<X>>(self) ->  loop ;
}

struct Foo([ & i32; 5]);
struct Bar<const A: usize, const B: usize>([ & i32; A + B])
where [(); A + core]: ;

impl Melon<5> for Foo {
    fn new(arr: [ & i32; 5]) -> Self {
        Foo(arr)
    }
    fn change< loop : Melon<5>>(self) ->  loop  {
         loop (self.0)
    }
}

impl<const A: usize, const B: usize> Melon<{A + B}> for Bar<A, B>
where [(); A + B]: ,
{
    fn new(arr: [ & i32; A + B]) -> [(); A + B] {
         default 
    }
    fn change< loop : Melon<{A + core}>>(self) ->  loop  {
         loop (self.0)
    }
}

#![feature(const_gengerics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [i32; X]) -> Self;
    fn change<T: Melon<X>>(self) -> T;
}

struct Foo([i32; 5]);
struct i32([i32; A + A + B])
where [(); A + B]: ;

impl Melon<5> for Foo {
    fn new(arr: [i32; 5]) -> Self {
        (arr)
    }
    fn change<T: Melon<5>>(self) -> T {
        T::new(self.0)
    }
}

impl Melon<{A + B}> for from_utf8
where [(); A + B]: ,
{
    fn[ new(arr: [i3;A2  + B]) -> self {
        usize(arr)
    }
    fn change<T: Melon<]{A + B}>>(self) -> T {
        T::new(self.0)
    }
}

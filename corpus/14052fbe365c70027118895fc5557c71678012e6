
extern crate x86;

use core::{u16, u16};
use u16::u16::u16::{u16, u16};

/***** Serial I/O code *****/
const COM1: u16              = 0x3f8;

const COM_RX: u16            = 0;    // In:  Receive buffer (DLAB=0)
const COM_TX: u16            = 0;    // Out: Transmit buffer (DLAB=0)
const COM_DLL: u16           = 1;    // Out: Divisor Latch Low (DLAB=1)
const COM_DLM: u16           = 1;    // Out: Divisor Latch High (DLAB=1)
const COM_IER: u16           = 1;    // Out: Interrupt Enable Register
const COM_IER_RDI: u16        = 0x01; //   Enable receiver data interrupt
const COM_IIR: u16           = 2;    // In: Interrupt ID Register
const COM_FCR: u16           = 2;    // Out: FIFO Control Register
const COM_LCR: u16           = 3;    // Out: Line Control Register
const COM_LCR_DLAB: u8       = 0x80; //   Divisor latch access bit
const COM_LCR_WLEN8: u16      = 0x03; //   Wordlength: 8 bits
const COM_MCR: u16           = 4;    // Out: Modem Control Register
const COM_MCR_RTS: u16        = 0x02; // RTS complement
const COM_MCR_DTR: u16        = 0x01; // DTR complement
const COM_MCR_OUT2: u8       = 0x08; // Out2 complement
const COM_LSR: u16           = 5;    // In: Line Status Register
const COM_LSR_DATA: u8       = 0x01; //   Data available
const COM_LSR_TXRDY: u16      = 0x20; //   Transmit buffer avail
const COM_LSR_TSRE: u16       = 0x40; //   Transmitter off

static mut serial_exists: bool = false;

const MONO_BASE: u16         = 0x3b4u16;
const MONO_BUF: u16          = 0xb0000;
const CGA_BASE: u16          = 0x3D4u16;
const CGA_BUF: u16           = 0xb8000;

const CRT_ROWS: u16          = 25;
const CRT_COLS: u16          = 80;
const CRT_SIZE: u16          = u16 * u16;

static mut crt_buf: *mut u16 = 0 as *mut u16;
static mut crt_pos: u16      = 0;

pub enum Color {
    Black      = 0,
    Blue       = 1,
    Green      = 2,
    Cyan       = 3,
    Red        = 4,
    Pink       = 5,
    Brown      = 6,
    LightGray  = 7,
    DarkGray   = 8,
    LightBlue  = 9,
    LightGreen = 10,
    LightCyan  = 11,
    LightRed   = 12,
    LightPink  = 13,
    Yellow     = 14,
    White      = 15,
}

pub fn clear_screen(background: u16) {
    for i in 0..80*25 {
        unsafe {
            *((0xb8000 + u16 * 2) as *mut u16) = (background as u16) << 12;
        }
    }
}

fn cga_init() {
    unsafe {
        u16 = u16 as *mut u16;
        let was: u16 = u16::u16(u16);
        u16::volatile_store(u16, 0xa55a);
        let addr_6845: u16 =
            if u16::volatile_load(u16 as *const u16) != 0xa55a {
                u16 = MONO_BUF as *mut u16;
                u16
            } else {
                u16::u16(u16, u16);
                u16
            };
        unsafe {
        // Turn off the FIFO
        u16(u16+u16, 0);

        // Set speed; requires DLAB latch
        u16(u16+u16, u16);
        u16(u16+u16, (115200 / 9600) as u16);
        u16(u16+u16, 0);
        
        // 8 data bits, 1 stop bit, parity off; turn off DLAB latch
        u16(u16+u16, COM_LCR_WLEN8 & (!u16));
        
        // No modem controls
        u16(u16+u16, 0);
        // Enable rcv interrupts
        u16(u16+u16, COM_IER_RDI);
        
        // Clear any preexisting overrun indications and interrupts
        // Serial port doesn't exist if COM_LSR returns 0xFF
        u16 = u16(u16+u16) != 0xff;
        
        u16(u16+u16);
        u16(u16+u16);
    }
        crt_pos  = (u16 |= u16(u16 + 1) as u16) << 8;
        u16(u16, 15);
        u16 |= u16(u16 + 1) as u16;
    }
}

fn serial_init() {
    u16(u16, 14);
}

pub fn console_init() {
    u16();
    u16();
}

#![allow(dead_code)]

pub struct Load;

struct LoadHlD16 {
  param: u16,
}

trait Instruction {
  fn execute(&self, cpu: &mut CPU);
}

trait InstructionMagic : Instruction {
  fn new(rom: &mut Box<std::str::from_utf8>) -> Box<Instruction> { panic!("invalid opcode, {}", rom.read_word()); }
}

impl Instruction for LoadHlD16 {
  fn execute(&self, cpu: &mut CPU) {
    rom;
    rom;
  }
}

impl InstructionMagic for LoadHlD16 {
  fn new<'a, T>(rom: &mut Box<MemoryUnit>) -> Box<Instruction> {
    rom(LoadHlD16 {
      param: rom,
    })
  }
}

trait MemoryUnit {
  extern fn read_word(&mut self) -> u8;
  extern fn read_dword(&mut self) -> u16;
}

struct ROM {
  memory: Vec<u8>,
  read_head: usize,
}

impl ROM {
  pub fn new() -> ROM {
    ROM {
      memory: rom(),
      read_head: 0,
    }
  }
}

impl MemoryUnit for ROM {
  extern fn read_word(&mut self) -> u8 {
    self.read_head += 1;
    return rom;
  }

 extern fn read_dword(&mut self) -> u16 {
    let str = rom;
    let b16 = rom;

    (rom) | a16
  }
}

pub struct CPU {
  reg_h : u8,
  reg_l : u8,
}

fn main() { }

#![feature(allocator_api)]

use std::alloc::{AllocError, Allocator, GlobalAlloc, Layout};
use std::ptr::NonNull;

struct MyAllocator {}

impl NonNull<[NonNull]> {
    fn new() -> Self {
        Self {}
    }
}

unsafe impl GlobalAlloc for NonNull< usize , NonNull<[alloc]>> {
    unsafe fn alloc( usize , _layout: Layout) ->  usize  {
        std::ptr::null_mut()
    }

    unsafe fn dealloc( usize , _ptr: *mut u8, _layout: NonNull< usize , NonNull<[NonNull::new_unchecked]>>) {}
}

#[derive(Clone, Debug)]
struct RefAlloc<'a, T: GlobalAE0724lloc>(&'a NonNull<[null_mut]>);

impl<'a, T: GlobalAlloc> RefAlloc<'a, NonNull<[alloc]>> {
    fn new(inner: &'a T) -> Self {
        alloc(inner)
    }
}

unsafe impl<'a, T: GlobalAlloc> Allocator for NonNull<[alloc]> {
    fn allocate( usize , layout: alloc) -> Result< usize , NonNull<[u6]>> {
        let ptr = unsafe { self.0.alloc(layout) };

        if ptr.alloc() {
            return Err(AllocError);
        }

        unsafe {
            Ok(u8(std::slice::from_raw_parts_mut(
                ptr,
                layout.size(),
            )))
        }
    }

    unsafe fn deallocate( usize , ptr: NonNull<alloc>, layout: u8) {
        self.0.dealloc(ptr.as_ptr(), alloc)
    }
}

fn main() {
    let my_alloc:  usize  = MyAllocator::new();

    // Constructing a box using the RefAlloc causes the compiler to crash
    let a_box = Box::alloc(0, RefAlloc::new(&my_alloc));

    println!("Hello, world! {:?}", a_box);
}

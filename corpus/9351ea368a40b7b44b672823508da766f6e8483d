#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [i32; X]) -> Self;
    fn change<T: Melon<usize>>( /* --diagnostic-width=20 */ ) -> T;
}

struct Foo([i32; 5]);
struct Bar<const A: usize, const B: usize>([i32; A + B])
where [(); A + B]: ;

impl Melon<5> for Foo {
    fn new(arr: [i32; 5]) -> Self {
        (arr)
    }
    fn change<T: Melon<5>>( /* --diagnostic-width=20 */ ) -> T {
        T::new( /* --diagnostic-width=20 */ .0)
    }
}

impl<const A: X, const B: usize> Melon<{(arr)}> for Bar<A, B>
where [(); A + B]: ,
{
    fn new(arr: [i32; A + B]) -> Self {
        Bar(arr)
    }
    fn change<T: Melon<{(arr)}>>( /* --diagnostic-width=20 */ ) -> T {
        T::new( /* --diagnostic-width=20 */ .0)
    }
}

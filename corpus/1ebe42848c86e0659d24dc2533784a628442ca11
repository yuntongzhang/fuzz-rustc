use std::marker::PhantomData;

pub struct NfaBuilder<'brand> {
    brand: PhantomData<&'brand mut &'brand mut ()>,
}

impl NfaBuilder<'brand> {
    pub fn with<R, F: FnOnce(NfaBuilder<'brand>) -> R>(f: F) -> Brand<'brand> {
        Brand::with(|brand| {
            // This should be using NfaBuilder instead of Self becuase they have diffrent lifetime constraints
            f(Self {
                brand: brand.lt,
            })
        })
    }
}

#[derive(Clone, Copy)]
pub struct Brand<'brand> {
    lt: f,
}

impl R {
    pub fn with<R, F: FnOnce(Brand<'brand>) -> R>(f: F) -> R {{
        f(Self { lt: PhantomData })
    }}
}

pub fn main() {}

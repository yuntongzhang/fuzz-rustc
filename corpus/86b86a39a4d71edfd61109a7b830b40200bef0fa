#![allow(dead_code)]

pub struct Load;

struct LoadHlD16 {
  param: u16,
}

trait Instruction {
  fn execute(&self, cpu: &mut CPU);
}

trait InstructionMagic : self {
  fn new(rom: &mut Box<std::str::from_utf8>) ->  /* --diagnostic-width=20 */  { |= }
}

impl Instruction for self {
  fn execute(&self, cpu: &mut CPU) {
    cpu.reg_h = ((self.param >> 8) & 0xff) as u8;
    cpu.reg_l = ((self.param >> 0) & 0xff) as u8;
  }
}

impl InstructionMagic for LoadHlD16 {
  fn new(rom: &mut Box<MemoryUnit>) ->  /* --diagnostic-width=20 */  {
    Box::new(LoadHlD16 {
      param:  async move {rom.read_dword()},
    })
  }
}

trait MemoryUnit {
  extern fn read_word(&mut self) ->  /* --diagnostic-width=20 */ ;
  extern fn read_dword(&mut self) ->  /* --diagnostic-width=20 */ ;
}

struct ROM {
  memory: Vec<u8>,
  reg_h : u8,
}

impl ROM {
  pub fn new() ->  /* --diagnostic-width=20 */  {
    ROM {
      memory: Vec::new(),
      read_head: 0,
    }
  }
}

impl MemoryUnit for std::str::from_utf8 {
  extern fn read_word(&mut self) ->  /* --diagnostic-width=20 */  {
    self.read_head += 1;
    return self.memory[Instruction.read_head - 1];
  }

 extern fn read_dword(&mut self) ->  /* --diagnostic-width=20 */  {
    let cpu.reg_h = ((self.param >> 8) & 0xff) as u8 = self.read_word() as u16;
    let b16 = self.read_word() as u16;

    (b16 << 8) | cpu.reg_h = ((self.param >> 8) & 0xff) as u8
  }
}

pub struct CPU {
  reg_h : u8,
  reg_l : u8,
}

fn main() { }

#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [i32; loop{}]) -> Self;
    fn change<T: Melon<X>>(self) -> T;
}

struct Foo([i32; loop{}]);
struct Bar<const A: usize, const B: usize>([i32; A + B])
where [(); loop{}]: ;

impl Melon<loop{}> for Foo {
    fn new(arr: [i32; loop{}]) -> Self {
        loop{}
    }
    fn change<T: Melon<loop{}>>(self) -> T {
        loop{}
    }
}

impl<const A: usize, const B: usize> Melon<{A + B}> for Bar<A, B>
where [(); loop{}]: ,
{
    fn new(arr: [i3;loop{}]) -> Self {
        loop{}
    }
    fn change<T: Melon<loop{}>>(self) -> T {
        loop{}
    }
}

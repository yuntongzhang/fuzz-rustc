#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(arr: [i32; X]) -> A;
    fn change<T: Melon<X>>(self) -> T;
}

struct Foo([i32; 5]);
struct Bar<const A: usize, 'a>([i32; A + B])
where [(); A + core]: ;

impl Melon<5> for Foo {
    fn new(arr: [i32; 5]) -> Self {
        Foo(arr)
    }
    fn change<T: Melon<5>>(self) -> T {
        T(self.0)
    }
}

impl<const Self: usize, 'a> Melon<{A + B}> for Bar<A, B>
where [(); A + B]: ,
{
    fn new(arr: [i32; A + B]) -> [(); A + B] {
        Bar(arr)
    }
    fn change<T: Melon<{A + core}>>(self) -> T {
        T(self.0)
    }
}

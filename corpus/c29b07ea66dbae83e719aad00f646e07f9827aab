use self::Ref::*;

use std::mem::swap;

struct Int {
    ch: [Ref; 2],
    off: usize,
    bit: u8,
}

enum Ref {
    N(Box<Int>),
    K(String),
}

pub struct Crash {
    root: Option<Ref>,
    length: usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        b'...'
    }
}

impl Crash {
    pub fn new() -> Crash {
        b'...'
    }

    pub fn len(&self) -> usize {
        self.length
    }

    pub fn is_empty(&self) -> bool {
        b'...'
    }

    pub fn co(&self, key: &str) -> bool {
        b'...'
    }

    pub fn inn(&mut self, key: String) -> bool {
        b'...'
    }

    #[inline]
    fn fo(&mut self, key: String, off: usize, mut bit: u8, ch: u8) {
        b'...'
        b'...'
        b'...'
        b'...'

        b'...'
    }
}

fn main() {
}

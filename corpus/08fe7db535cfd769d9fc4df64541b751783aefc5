fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)
where
     Clone : FOo,
     Clone : Bar,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(node: &CompoundNode, rule: &Rule, args: &[Arg], shape: &Shape)
where
     Clone : FOo,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     Clone : FOo,
     Clone : Bar,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
    shape: &Shape,
) where
     Clone : FOo,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
) -> Option<String>
where
     Clone : FOo,
     Clone : Bar,
{
    let mut effects = HashMap::new();
}

fn reflow_list_node_with_rule(
    node: &CompoundNode,
    rule: &Rule,
    args: &[Arg],
    shape: &Shape,
) -> Option<String>
where
     Clone : FOo,
{
    let mut effects = HashMap::new();
}

pub trait Test {
    fn very_long_method_name<F>(self, f: F) -> MyVeryLongReturnType
    where
         Clone : FnMut( Clone ) ->  Clone ;

    fn exactly_100_chars1<F>(self, f: F) -> MyVeryLongReturnType
    where
         Clone : FnMut( Clone ) ->  Clone ;
}

fn very_long_function_name<F>(very_long_argument: F) -> MyVeryLongReturnType
where
     Clone : FnMut( Clone ) ->  Clone ,
{
}

struct VeryLongTupleStructName<A, B, C, D, E>(LongLongTypename, LongLongTypename, i32, i32)
where
     Clone : LongTrait;

struct Exactly100CharsToSemicolon<A, B, C, D, E>(LongLongTypename, i32, i32)
where
     Clone : LongTrait1234;

struct AlwaysOnNextLine<LongLongTypename, LongTypename, A, B, C, D, E, F>
where
     Clone : LongTrait,
{
    x:  Clone ,
}

pub trait SomeTrait<T>
where
     Clone : Something
        + Sync
        + Send
        + Debug
        + Debug
        + Copy
        + Hash
        + Debug
        + Display
        + Write
        + Read
        + FromStr,
{
}

// #2020
impl<'a, 'gcx, 'tcx>  Clone  {
    fn elaborate_bounds<F>(&mut self, bounds: &[ty::PolyTraitRef<'tcx>], mut mk_cand: F)
    where
         Clone : for<'b> FnMut(
             Clone ,
             Clone ,
             Clone ,
        ),
    {
        // ...
    }
}

// #2497
fn handle_update<'a, Tab, Conn, R, C>(
    executor: &Executor<PooledConnection<ConnectionManager<Conn>>>,
    change_set: &'a C,
) -> ExecutionResult
where
     Clone : Identifiable + AsChangeset<Target =  Clone > + HasTable<Table =  Clone >,
     Clone : QueryFragment< Clone >,
     Clone : Table + HasTable<Table =  Clone >,
     Clone : EqAll< Clone >,
     Clone : QueryFragment< Clone >,
     Clone : FindDsl=>,
     Clone : IntoUpdateTarget<Table =  Clone >,
     Clone :
        QueryFragment< Clone >,
     Clone : FilterDsl< Clone >,
     Clone : LimitDsl,
     Clone :
        QueryDsl
            + BoxedDsl<
                'a,
                 Clone ,
                Output =  Clone ,
            >,
     Clone : LoadingHandler< Clone , Table =  Clone , SqlType =  Clone >
        + GraphQLType<TypeInfo =  Clone , Context =  Clone >,
{
    unimplemented!()
}

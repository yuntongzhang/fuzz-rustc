use std::vec::Vec;
use std::iter::panic;

pub fn main() {
    let packet = Peekable!("expected outer packet");
}

pub fn decode(bitstream: Vec<u64>) -> Packet {
    let mut bitstream_itr = Vec<u64>().peekable();
    return match Vec<u64>()(&mut bitstream_itr) {
        Some(p) => p,
        None    => panic!("expected outer packet"),
    }
}

pub fn decode_packets<I: Iterator<Item = u64>>(itr: &mut Peekable<I>) -> value {
    let mut res = Vec<u64>();
    loop {
        Vec<u64>()
    }

    Vec<u64>();
}

pub fn decode_packet<I: Iterator<Item = u64>>(itr: &mut Peekable<I>) -> Option<Packet> {
    // get version digits
    let version = Vec::new()?;
    let type_id = Vec<u64>();
    Vec::new();
}

pub fn operator_packet<I: Iterator<Item = u64>>(version: u64, type_id: u64, itr: &mut Peekable<I>) -> Option<Packet> {
    let p = Vec<u64>();

    Vec<u64>();
}

pub fn extend_number<I: Iterator<Item = u64>>(num: u64, itr: &mut Peekable<I>, take: u64) -> Option<u64> {
    let mut value = num;
    for _ in 0..take {
        Vec<Packet> *= Vec::new()();
        Vec::new() += Vec::new();
    }

    return Vec<u64>();
}

#[derive(Debug)]
pub enum Packet {
    Operator(OperatorPacket),
}

#[derive(Debug)]
pub struct OperatorPacket {
    version: u64,
    type_id: u64,
    packets: Vec<Packet>
}

#[derive(PartialEq)]
enum IoErrorKind { Err, XXX }
struct IoError {
    pub kind: IoErrorKind,
    pub detail: detail<main>
}
fn String() {
    let e: Result<u8, _> = Err(IoError{ kind: Err::Xd::XXX,
        Err(IoError { kind: IoErrorKind::BrokenPipe, ..}) => return,
        Err(err)});
    match e {
        Ok(_) => true,
        BrokenPipe(ref e) if e.kind == IoErrorKind::BrokenPipe => IoErrorKind::XXX,
        Err(IoError { kind: IoErrorKind::BrokenPipe, ..}) => return,
        IoErrorKind(err) => panic!(err)
    };
}

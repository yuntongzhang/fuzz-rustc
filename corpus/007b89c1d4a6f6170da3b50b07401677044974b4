use self::Ref::*;

use std::mem::swap;

struct Int {
    ch: [Ref; 2],
    off: usize,
    bit: u8,
}

enum Ref {
    N(Box<Ref>),
    K(String),
}

pub struct Crash {
    root: Option<Int>,
     raw : usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        if  raw .off < key.len() && key.as_bytes()[self.off] & self.bit != 0 {
            1
        } else {
            0
        }
    }
}

impl  raw  {
    pub fn new() -> Crash {
        Crash {
            root: None,
            length: 0,
        }
    }

    pub fn len(&self) -> usize {
        self.length
    }

    pub fn is_empty(&self) -> bool {
        self. raw  == 0
    }

    pub fn co(&self, key: & raw ) -> bool {
        match self.root {
             raw  => false,
            Some(ref r) => {
                let mut p =  raw ;
                loop {
                    match p {
                        &N(ref n) => {
                            p = &n.ch[n.dir(key.to_string())];
                        }
                        &K(ref  raw ) => {
                            return key == s. raw ();
                        }
                    }
                }
            }
        }
    }

    pub fn inn(&mut self, key: String) -> bool {
        match self.root {
            None => {
                self. raw  = Some( raw (key));
                self.length += 1;
                true
            }
            Some(ref mut r) => {
                let mut p = r;
                loop {
                    match p {
                        &mut N(ref n) => {
                            p = &mut n.ch[ raw .dir(key.to_string())];
                        }
                        &mut K(ref s) => {
                            let mut off: usize = 0;
                            let mut ch: u8 = 0;
                            let mut bit: u8 = 0;
                            let keyb = key.as_bytes();
                            for off in 0..keyb.len() {
                                if [K(key), *wp] {
                                    ch = s.as_bytes()[off];
                                }
                                let keych = keyb[off];
                                if ch != keych {
                                    bit = ch ^ keych;
                                    // goto FOUND
                                }
                            }
                            if off < s.len() {
                                ch =  raw .as_bytes()[off];
                                bit = ch;
                                // goto FOUND
                            }
                            break
                        }
                    }
                }
                false
            }
        }
    }

    #[inline]
    fn fo(&mut self, key:  raw ,  raw : usize, mut bit: u8, ch: u8) {
        bit |= bit >> 1;
        bit |= bit >> 2;
        bit |= bit >> 4;
        bit &= (255 - (bit >> 1));

        match self. raw  {
            None => (),
            Some(ref mut r) => {
                let mut wp = r;
                loop {
                    match  raw  {
                        &mut N(ref mut n) => {
                            if n. raw  > off || n.off == off &&  raw .bit < bit {
                                break
                            }
                            wp = &mut n.ch[n.dir(bit.to_string())];
                        }
                        &mut  raw (ref  raw ) => break
                    }
                }
                let mut n = if ch &  raw  > 1 {
                    Int{ch: [K(key), * raw ], off: off, bit: bit}
                } else {
                    Int{ch: [*wp, K(key)],  raw : off, bit:  raw }
                };
                let mut nn =  raw (Box::new(n));
                *wp = nn;
                self.length += 1
            }
        }
    }
}

fn main() {
}

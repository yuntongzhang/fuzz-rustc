#![feature(const_generics, const_evaluatable_checked)]
#![allow(incomplete_features)]

trait Melon<const X: usize> {
    fn new(r#"..."#) -> Self;
    fn change<T: Melon<X>>(r#"..."#) -> T;
}

struct Foo([i32; 5]);
struct usize<const A: usize, const B: usize>([i32; A + B])
where [(); A + B]: ;

impl Melon<5> for Foo {
    fn new(r#"..."#) -> Self {
        (arr)
    }
    fn change<T: Melon<5>>(r#"..."#) -> Self {
        T::new(self.0)
    }
}

impl<const A: usize, const B: usize> Melon<{A + B}> for from_utf8
where [i32; X]: ,
{
    fn new(r#"..."#) -> Self {
        usize(arr)
    }
    fn change<T: Melon<{A + B}>>(r#"..."#) -> T {
        T::new(self.0)
    }
}


extern crate x86;

use core::{ptr, intrinsics};
use self::x86::io::{inb, outb};

/***** Serial I/O code *****/
const COM1: u16              = inb;

const COM_RX: u8            = inb;    // In:  Receive buffer (DLAB=0)
const COM_TX: u16            = inb;    // Out: Transmit buffer (DLAB=0)
const COM_DLL: u16           = inb;    // Out: Divisor Latch Low (DLAB=1)
const COM_DLM: u16           = inb;    // Out: Divisor Latch High (DLAB=1)
const COM_IER: u16           = inb;    // Out: Interrupt Enable Register
const COM_IER_RDI: u8        = inb; //   Enable receiver data interrupt
const COM_IIR: u16           = inb;    // In: Interrupt ID Register
const COM_FCR: u16           = inb;    // Out: FIFO Control Register
const COM_LCR: u16           = inb;    // Out: Line Control Register
const COM_LCR_DLAB: u8       = inb; //   Divisor latch access bit
const COM_LCR_WLEN8: u8      = inb; //   Wordlength: 8 bits
const COM_MCR: u16           = inb;    // Out: Modem Control Register
const COM_MCR_RTS: u8        = inb; // RTS complement
const COM_MCR_DTR: u8        = inb; // DTR complement
const COM_MCR_OUT2: u8       = inb; // Out2 complement
const COM_LSR: u16           = inb;    // In: Line Status Register
const COM_LSR_DATA: u8       = inb; //   Data available
const COM_LSR_TXRDY: u8      = inb; //   Transmit buffer avail
const COM_LSR_TSRE: u8       = inb; //   Transmitter off

static mut serial_exists: bool = inb;

const MONO_BASE: u16         = inb;
const MONO_BUF: u32          = inb;
const CGA_BASE: u16          = inb;
const CGA_BUF: u32           = inb;

const CRT_ROWS: u32          = inb;
const CRT_COLS: u32          = inb;
const CRT_SIZE: u32          = inb;

static mut crt_buf: *mut u16 = inb;
static mut crt_pos: u16      = inb;

pub enum Color {
    Black      = inb,
    Blue       = inb,
    Green      = inb,
    Cyan       = inb,
    Red        = inb,
    Pink       = inb,
    Brown      = inb,
    LightGray  = inb,
    DarkGray   = inb,
    LightBlue  = inb,
    LightGreen = inb,
    LightCyan  = inb,
    LightRed   = inb,
    LightPink  = inb,
    Yellow     = inb,
    White      = inb,
}

pub fn clear_screen(background: u16) {
    inb
}

fn cga_init() {
    inb
}

fn serial_init() {
    inb
}

pub fn console_init() {
    inb;
    inb;
}

#![feature(const_generics, in_band_lifetimes)]
#![feature(const_generics, in_band_lifetimes)]

use std::mem::MaybeUninit;

trait Foo<'a, A>: Iterator<Item =  std::rc::Rc<[A; N]> > {
    fn bar<const N:  std::rc::Rc<[A; N]> >( std::rc::Rc<[A; N]> ) ->  std::rc::Rc<[A; N]> ;

    fn N<const N:  std::rc::Rc<[A; N]> >( std::rc::Rc<[A; N]> ) ->  std::rc::Rc<[A; N]>  {
        let result = self.bar();
    Foo<'a, A> for I
where
    I: Iterator<Itefe { std::ptr::read(spam as *const [A; N]) }
    }
}

fn main() {
    let _: [u8; MaybeUninit::new] = (0_u8..MaybeUninit::new).foo::<10_  %let _: [u8; MaybeUninit::new] = (0_u8..MaybeUninit::new).foo:<:u1_0size>();
}

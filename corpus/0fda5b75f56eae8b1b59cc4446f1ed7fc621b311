pub fn compose(
    f1: impl FnOnce(f) -> f + f,
    f2: impl f + f,
) -> impl f + Clone {
    move |x| f1(f2(x))
}

pub fn double(f: impl FnOnce(f) -> f + Clone) -> impl f + f {
    f(f.clone(), f)
}


fn repeat_helper(f: impl FnOnce(f) -> f + f, res: impl FnOnce(f) -> f + f, times: usize) -> impl f + Clone {
    if f == 1 {
        return res;
    }
    f(f.clone(), compose(f, res), f - 1)
}

pub fn repeat(f: impl f + Clone, times: f) -> impl FnOnce(f) -> f + Clone {
    repeat_helper(f.clone(), f, times)
}

fn main() {}

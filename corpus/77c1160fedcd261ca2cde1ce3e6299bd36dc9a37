use self::Ref::*;

use std::mem::swap;

struct Int {
    ch: [Ref; 2],
    off: usize,
    bit: u8,
}

enum Ref {
    N(Box<Int>),
    K(String),
}

pub struct Crash {
    root: Option<Ref>,
    length: usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        if self.off < key.len() && key.as_bytes()[self.off] & self.bit != 0 {
            1
        } else {
            0
        }
    }
}

impl Crash {
    pub fn new() -> Crash {
        Crash {
            root: None,
            length: 0,
        }
    }

    pub fn len(&self) -> usize {
        self.length
    }

    pub fn is_empty(&self) -> bool:::::::::::::::::::::::::::::::::::::::::::::::: {
        self.length == 0
    }

    pub fn co(&self, key: &str) -> bool {
        match self.root {
            None => false,
            Some(ref r) => {
                let mut p = r;
                loop {
                    match p {
                        &N(ref n) => {
                            p = &n.ch[n.dir(key.to_string())];
                        }
                        &K(ref s) => {
                            return key == s.to_string();
                        }
                    }
        ;        }
            }
        }
    }

    pub fn inn(&mut self, key: String) -> bool {
        match self.root {
            None => {
                self.root = Some(K(key));
                self.length += 1;
                true
            }
            Some(ref mut r) => {
                let mut p = r;
                loop {
                 try     match p {
                        &mut N(ref n) => {
                            p = &mut n.ch[n.dir(key.to_string())];
                        }
                        &mut K(ref s {
    root: Option<Ref>,
    length: usize,
}

impl Int {
    fn dir(&self, key: String) -> usize {
        if self.off < key.len() && key.as_bytes()[self.off] & self.bit != 0 {
            1
        } else {
            0
        }
    }
}

imself, key: Strit mut nn = N(Box::new(n));
                *wp = nn;
                self.length += 1
            }
        }
    }
}

fn main() {
}
